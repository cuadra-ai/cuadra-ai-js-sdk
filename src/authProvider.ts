/**
 * Cuadra AILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  compositeAuthenticationProvider,
  OAuthConfiguration,
  requestAuthenticationProvider,
} from './authentication';
import { AuthorizationCodeAuthManager } from './authorizationCodeAuthManager';
import { Configuration } from './configuration';
import { OauthToken } from './models/oauthToken';

export function createAuthProviderFromConfig(
  config: Partial<Configuration>,
  oauth2: () => AuthorizationCodeAuthManager
) {
  const authConfig = {
    oauth2:
      config.authorizationCodeAuthCredentials &&
      requestAuthenticationProvider(
        config.authorizationCodeAuthCredentials.oauthToken,
        oauth2TokenProvider(
          oauth2,
          config.authorizationCodeAuthCredentials.oauthTokenProvider
        ),
        config.authorizationCodeAuthCredentials.oauthOnTokenUpdate,
        {
          clockSkew: config.authorizationCodeAuthCredentials.oauthClockSkew,
        } as OAuthConfiguration
      ),
  };

  return compositeAuthenticationProvider<
    keyof typeof authConfig,
    typeof authConfig
  >(authConfig);
}

function oauth2TokenProvider(
  oauth2: () => AuthorizationCodeAuthManager,
  defaultProvider:
    | ((
        lastOAuthToken: OauthToken | undefined,
        authManager: AuthorizationCodeAuthManager
      ) => Promise<OauthToken>)
    | undefined
): ((token: OauthToken | undefined) => Promise<OauthToken>) | undefined {
  return (token: OauthToken | undefined) => {
    const manager = oauth2();
    if (defaultProvider === undefined) {
      return manager.updateToken(token);
    }
    return defaultProvider(token, manager);
  };
}
